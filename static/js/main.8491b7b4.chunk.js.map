{"version":3,"sources":["assests/Clear.svg","assests/Clouds.svg","assests/Drizzle.svg","assests/Other.svg","assests/Rain.svg","assests/Snow.svg","assests/ThunderStorm.svg","assests/Tornado.svg","mockData.js","components/Loader/Loader.js","components/Buttons/Button/Button.js","context/app-context.js","components/Buttons/Buttons.js","components/ToolBar/Navigation/Navigation.js","components/ToolBar/ToggleSwitcher/ToggleSwitcher.js","components/ToolBar/ToolBar.js","helpers/weatherIcons.js","components/CitiesOptions/CityOption/CityOption.js","components/CitiesOptions/CitiesOptions.js","components/HistoryPage/HistoryPage.js","components/MainPage/MainPage.js","helpers/chunkArr.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","name","id","Loader","className","Button","click","disabled","children","isSecondary","btnClass","onClick","appContext","React","createContext","Buttons","useContext","AppContext","nextBtnClick","disabledNext","restartBtnClick","curIndex","dataLength","NavigationItems","isHistory","console","log","Switcher","onChange","type","htmlFor","ToolBar","toggleClick","navClick","getIcon","iconName","allIcons","Clear","Clouds","Drizzle","Other","Rain","Snow","ThunderStorm","Tornado","CityOption","data","chosenModifierClass","isClicked","temp","isFahrenheit","Math","round","src","weather","alt","CitiesOptions","cities","selectAnswerHandler","selectedAnswerId","correctId","isTempEqual","additionalClass","citiesToDisplay","map","cur","key","HistoryPage","allAnswers","results","MainPage","curScore","maxScore","chunkArr","arr","Array","from","length","ceil","v","i","slice","App","initialState","curOptionsIndex","history","state","nextBtnClickHandler","newIndex","setState","selectedAnswerHandler","addClass","newHistoryArr","push","restartGameHandler","onToggleHandler","navClickHander","navItem","this","getWeatherData","allCityIds","mockData","join","fetch","result","json","allData","neededData","list","parseInt","main","chunkedData","error","content","context","Provider","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8491b7b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Clear.ff816a6b.svg\";","module.exports = __webpack_public_path__ + \"static/media/Clouds.bfd87d49.svg\";","module.exports = __webpack_public_path__ + \"static/media/Drizzle.741ef3be.svg\";","module.exports = __webpack_public_path__ + \"static/media/Other.7085c567.svg\";","module.exports = __webpack_public_path__ + \"static/media/Rain.741ef3be.svg\";","module.exports = __webpack_public_path__ + \"static/media/Snow.6c248142.svg\";","module.exports = __webpack_public_path__ + \"static/media/ThunderStorm.6ca4d282.svg\";","module.exports = __webpack_public_path__ + \"static/media/Tornado.abd95cbf.svg\";","export default [\n    { name: 'Tbilisi', id: 611717 },\n    { name: 'Kiev', id: 703448 },\n    { name: 'London', id: 2643743 },\n    { name: 'Sydney', id: 2147714 },\n    { name: 'Rome', id: 3169070 },\n    { name: 'Prague', id: 3067696 },\n    { name: 'Los Angeles', id: 5368361 },\n    { name: 'Toronto', id: 6167865 },\n    { name: 'Tokyo', id: 1850147 },\n    { name: 'Paris', id: 2988507 },\n    { name: 'New York', id: 5128581 },\n    { name: 'Vienna', id: 2761369 },\n    { name: 'Barcelona', id: 3128760 },\n    { name: 'Amsterdam', id: 2759794 },\n    { name: 'Berlin', id: 2950159 },\n    { name: 'Florence', id: 3176959 },\n    { name: 'Dubai', id: 292223 },\n    { name: 'Madris', id: 3117735 },\n    { name: 'Hong Kong', id: 1819729 },\n    { name: 'Las Vegas', id: 5506956 }\n]","import React from 'react'\nimport './Loader.scss'\n\n\nconst Loader = () => (\n    <div className=\"Loader-container\">\n        <div id=\"frame_circle\">\n            <div className=\"circle\"></div>\n        </div>\n        <div id=\"frame\">\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n        </div>\n    </div>\n)\n\nexport default Loader ","import React from 'react'\nimport './Button.scss'\nimport PropTypes from 'prop-types'\n\nconst Button = ({ click, disabled, children, isSecondary = false }) => {\n    const btnClass = isSecondary ? \"Button--secondary\" : ''\n    return (\n        <button className={`Button ${btnClass}`} onClick={click} disabled={disabled} >{children}</button>\n    )\n\n}\n\nButton.propTypes = {\n    click: PropTypes.func,\n    disabled: PropTypes.bool,\n    isSecondary: PropTypes.bool\n}\nexport default Button","import React from 'react'\n\nconst appContext = React.createContext({})\n\nexport default appContext","import React, { useContext } from 'react'\nimport Button from './Button/Button'\nimport './Buttons.scss'\nimport AppContext from '../../context/app-context'\n\n\n\nconst Buttons = () => {\n\n    const { nextBtnClick, disabledNext, restartBtnClick, curIndex, dataLength } = useContext(AppContext)\n    let buttons = curIndex === dataLength - 1 ? (\n        <div className='Buttons'>\n            <Button isSecondary click={restartBtnClick} disabled={curIndex === 0}>Restart</Button>\n        </div>)\n        : (\n            <div className='Buttons'>\n                <Button\n                    click={nextBtnClick}\n                    disabled={disabledNext}\n                >\n                    Next\n                </Button>\n                <Button isSecondary click={restartBtnClick} disabled={curIndex === 0}>Restart</Button>\n            </div>\n        )\n\n    return (buttons)\n}\n\nexport default Buttons","import React, { useContext } from 'react'\nimport './Navigation.scss'\nimport AppContext from '../../../context/app-context'\nimport PropTypes from 'prop-types'\n\nconst NavigationItems = ({ click }) => {\n    const { isHistory } = useContext(AppContext)\n    console.log(isHistory)\n    return (<ul className='Navigation'>\n        <li className={`Navigation__item ${!isHistory ? 'Navigation__item--active' : ''}`} onClick={() => click('main')}>Main</li>\n        <li className={`Navigation__item ${isHistory ? 'Navigation__item--active' : ''}`} onClick={() => click('history')}>History</li>\n    </ul>)\n}\n\nNavigationItems.propTypes = {\n    click: PropTypes.func\n}\n\nexport default NavigationItems","import React from 'react'\nimport './ToggleSwitcher.scss'\nimport PropTypes from 'prop-types'\n\nconst Switcher = ({ click }) => (\n    <div className='ToggleSwitcher' onChange={click}>\n        <span className='ToggleSwitcher__fahrenheit'>°F</span>\n        <input className='ToggleSwitcher__input' type=\"checkbox\" id=\"switch\" />\n        <label className='ToggleSwitcher__label' htmlFor=\"switch\">Toggle</label>\n    </div>\n)\n\nSwitcher.propTypes = {\n    click: PropTypes.func\n}\n\nexport default Switcher","import React from 'react'\nimport './ToolBar.scss'\nimport Navigation from './Navigation/Navigation'\nimport ToggleSwitcher from './ToggleSwitcher/ToggleSwitcher'\nimport { useContext } from 'react'\nimport AppContext from '../../context/app-context'\n\nconst ToolBar = () => {\n    const { toggleClick, navClick } = useContext(AppContext)\n\n    return (\n        <div className='ToolBar'>\n            <ToggleSwitcher click={toggleClick} />\n            <Navigation click={navClick} />\n        </div>\n    )\n\n}\n\nexport default ToolBar","import Clear from '../assests/Clear.svg'\nimport Clouds from '../assests/Clouds.svg'\nimport Drizzle from '../assests/Drizzle.svg'\nimport Other from '../assests/Other.svg'\nimport Rain from '../assests/Rain.svg'\nimport Snow from '../assests/Snow.svg'\nimport ThunderStorm from '../assests/ThunderStorm.svg'\nimport Tornado from '../assests/Tornado.svg'\n\n\nconst getIcon = (iconName) => {\n    const allIcons = {\n        Clear: Clear,\n        Clouds: Clouds,\n        Drizzle: Drizzle,\n        Other: Other,\n        Rain: Rain,\n        Snow: Snow,\n        ThunderStorm: ThunderStorm,\n        Tornado: Tornado\n    }\n\n    return allIcons[iconName] ? allIcons[iconName] : allIcons.Other\n}\n\n\nexport default getIcon","import React, { useContext } from 'react'\nimport './CityOption.scss'\nimport getIcon from '../../../helpers/weatherIcons'\nimport AppContext from '../../../context/app-context'\nimport PropTypes from 'prop-types'\n\nconst CityOption = ({ data, chosenModifierClass, click, isClicked }) => {\n    const appContext = useContext(AppContext)\n    const isFahrenheit = appContext.isFahrenheit\n    const temp = isFahrenheit ? Math.round((data.temp * 9 / 5)) + 32 : data.temp\n\n    return (\n        <div className={`CityOption  ${chosenModifierClass}`} onClick={click}>\n            <p className=\"CityOption__city\">{data.name}</p>\n            <div className=\"CityOption__weather-container\">{isClicked ? <img className=\"CityOption__weather\" src={getIcon(data.weather)} alt='weather condition' /> : null}</div>\n            <span className='CityOption__temp'>{isClicked ? temp : null} </span>\n        </div >\n    )\n}\n\nCityOption.propTypes = {\n    data: PropTypes.object,\n    chosenModifierClass: PropTypes.string,\n    click: PropTypes.func,\n    isClicked: PropTypes.bool\n}\n\nexport default CityOption","import React from 'react'\nimport CityOption from './CityOption/CityOption'\nimport './CitiesOptions.scss'\nimport PropTypes from 'prop-types'\n\nconst CitiesOptions = ({ cities, selectAnswerHandler, selectedAnswerId }) => {\n\n    const correctId = cities[0].temp > cities[1].temp ? cities[0].id : cities[1].id\n    const isTempEqual = selectedAnswerId && cities[0].temp === cities[1].temp\n\n\n    let additionalClass = ''\n\n    const citiesToDisplay = cities.map(cur => {\n        additionalClass = isTempEqual || cur.id === correctId ? 'CityOption__correct' : 'CityOption__false'\n        additionalClass = isTempEqual || selectedAnswerId === cur.id ? additionalClass : ''\n        const onClickHandler = () => {\n            if (!selectedAnswerId) {\n                selectAnswerHandler(cur.id, correctId, additionalClass)\n            }\n        }\n\n        return < CityOption\n            key={cur.id}\n            data={cur}\n            chosenModifierClass={additionalClass}\n            click={onClickHandler}\n            isClicked={selectedAnswerId} />\n    })\n\n    return (\n        <div className='CitiesOptions'>\n            {citiesToDisplay}\n        </div>\n    )\n\n}\n\nCitiesOptions.propTypes = {\n    cities: PropTypes.array,\n    selectedAnswerHandler: PropTypes.func,\n    selectedAnswerId: PropTypes.number\n}\n\nexport default CitiesOptions","import React from 'react'\nimport './HistoryPage.scss'\nimport CitiesOptions from '../CitiesOptions/CitiesOptions'\nimport PropTypes from 'prop-types'\n\nconst HistoryPage = ({ results }) => {\n    const allAnswers = results.map(cur => {\n\n        return <CitiesOptions cities={cur.cities} selectedAnswerId={cur.selectedAnswerId} key={cur.cities[0].id} />\n    })\n\n    return (\n        <div className='HistoryPage'>\n            <h2 className=\"HistoryPage__heading\">Here are your answers</h2>\n            {allAnswers}\n        </div>\n\n    )\n\n}\n\nHistoryPage.propTypes = {\n    results: PropTypes.array\n}\n\nexport default HistoryPage","import React, { useContext } from 'react';\nimport './MainPage.scss';\nimport CitiesOptions from '../CitiesOptions/CitiesOptions'\nimport AppContext from '../../context/app-context'\nimport PropTypes from 'prop-types'\n\nconst MainPage = ({ curScore, maxScore }) => {\n    const { cities, selectAnswerHandler, selectedAnswerId } = useContext(AppContext)\n\n    return (\n        <div className=\"CitiesContainer\">\n            <h1 className='CitiesContainer__question'>Which is warmer?</h1>\n            <p className='CitiesContainer__score'>Your score is: {curScore}/{maxScore}</p>\n            <CitiesOptions cities={cities} selectAnswerHandler={selectAnswerHandler} selectedAnswerId={selectedAnswerId} />\n        </div>\n    )\n}\n\nMainPage.propTypes = {\n    curScore: PropTypes.number,\n    maxScore: PropTypes.number\n}\n\nexport default MainPage","\nexport const chunkArr = (arr) => {\n    return Array.from({ length: Math.ceil(arr.length / 2) }, (v, i) => arr.slice(i * 2, i * 2 + 2))\n}\n","import React, { Component } from 'react'\nimport mockData from './mockData'\nimport Loader from './components/Loader/Loader'\nimport Buttons from './components/Buttons/Buttons'\nimport AppContext from './context/app-context'\nimport ToolBar from './components/ToolBar/ToolBar'\nimport HistoryPage from './components/HistoryPage/HistoryPage'\nimport MainPage from './components/MainPage/MainPage'\nimport { chunkArr } from './helpers/chunkArr'\n\nconst myAppId = '8b1d635ad8d19cf658437581aeb08e79'\nclass App extends Component {\n  initialState = {\n    curOptionsIndex: 0,\n    selectedAnswerId: null,\n    curScore: 0,\n    history: []\n  }\n\n  state = {\n    data: null,\n    isFahrenheit: false,\n    isHistory: false,\n    ...this.initialState\n  }\n\n  componentDidMount() {\n    this.getWeatherData()\n  }\n\n  async getWeatherData() {\n    const allCityIds = mockData.map(cur => cur.id).join(',')\n    try {\n      const result = await fetch(`https://api.openweathermap.org/data/2.5/group?id=${allCityIds}&units=metric&appid=${myAppId}`)\n      const allData = await result.json()\n      const neededData = allData.list.map(cur => {\n        return {\n          temp: parseInt(cur.main.temp),\n          weather: cur.weather[0].main,\n          name: cur.name,\n          id: cur.id\n        }\n      })\n      const chunkedData = chunkArr(neededData)\n      this.setState({ data: chunkedData })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  nextBtnClickHandler = () => {\n    const newIndex = this.state.curOptionsIndex + 1\n\n    this.setState({\n      selectedAnswerId: null,\n      curOptionsIndex: newIndex <= this.state.data.length - 1 ? newIndex : this.state.curOptionsIndex\n    })\n  }\n\n  selectedAnswerHandler = (id, correctId, addClass) => {\n    const newHistoryArr = [...this.state.history]\n    newHistoryArr.push({\n      cities: this.state.data[this.state.curOptionsIndex],\n      selectedAnswerId: id\n    })\n\n    this.setState({\n      selectedAnswerId: id,\n      history: newHistoryArr,\n      curScore: id === correctId ? this.state.curScore + 1 : this.state.curScore\n    })\n  }\n\n  restartGameHandler = () => {\n    this.setState({\n      ...this.initialState\n    })\n  }\n\n  onToggleHandler = () => {\n    this.setState({ isFahrenheit: !this.state.isFahrenheit })\n  }\n\n  navClickHander = (navItem) => {\n    this.setState({ isHistory: navItem === 'main' ? false : true })\n  }\n\n  render() {\n    let content = <Loader />\n\n    if (this.state.data) {\n      const context = {\n        isFahrenheit: this.state.isFahrenheit,\n        isHistory: this.state.isHistory,\n        cities: this.state.data[this.state.curOptionsIndex],\n        selectAnswerHandler: this.selectedAnswerHandler,\n        selectedAnswerId: this.state.selectedAnswerId,\n        nextBtnClick: this.nextBtnClickHandler,\n        disabledNext: !this.state.selectedAnswerId,\n        restartBtnClick: this.restartGameHandler,\n        curIndex: this.state.curOptionsIndex,\n        dataLength: this.state.data.length,\n        toggleClick: this.onToggleHandler,\n        navClick: this.navClickHander\n      }\n\n      content =\n        <>\n          <AppContext.Provider value={{ ...context }}>\n            <ToolBar />\n            {this.state.isHistory ? <HistoryPage results={this.state.history} /> :\n              <>\n                <MainPage curScore={this.state.curScore} maxScore={this.state.data.length} />\n                <Buttons />\n              </>\n            }\n          </AppContext.Provider>\n        </>\n    }\n\n    return (\n      <div className=\"App\" >\n        {content}\n      </div>\n    )\n  }\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}