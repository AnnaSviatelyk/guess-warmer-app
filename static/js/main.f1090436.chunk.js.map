{"version":3,"sources":["assests/Clear.svg","assests/Clouds.svg","assests/Drizzle.svg","assests/Other.svg","assests/Rain.svg","assests/Snow.svg","assests/ThunderStorm.svg","assests/Tornado.svg","helpers/weatherIcons.js","context/app-context.js","components/CityOptions/CityOption/CityOption.js","components/CityOptions/CitiesOptions.js","components/Loader/Loader.js","mockData.js","components/Button/Button.js","components/ToggleSwitcher/ToggleSwitcher.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getIcon","iconName","allIcons","Clear","Clouds","Drizzle","Other","Rain","Snow","ThunderStorm","Tornado","appContext","React","createContext","CityOption","data","chosenModifierClass","click","isClicked","console","log","weather","temp","useContext","AppContext","isToggledToFahrenheit","Math","round","className","onClick","name","src","alt","CityOptions","cities","selectAnswerHandler","selectedAnswerId","maxScore","curScore","correctId","id","additionalClass","citiesToDisplay","map","cur","key","h","loader","button","disabled","children","type","btnClass","switcher","onChange","htmlFor","App","state","currOptionsIndex","nextBtnClickHandler","newIndex","length","setState","selectedAnswerHandler","restartGameHandler","onToggleHandler","this","getWeatherData","allCityIds","mockData","join","fetch","result","json","allData","neededData","list","parseInt","main","chunkedData","Array","from","ceil","v","i","slice","error","content","Provider","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f1090436.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Clear.ff816a6b.svg\";","module.exports = __webpack_public_path__ + \"static/media/Clouds.bfd87d49.svg\";","module.exports = __webpack_public_path__ + \"static/media/Drizzle.741ef3be.svg\";","module.exports = __webpack_public_path__ + \"static/media/Other.7085c567.svg\";","module.exports = __webpack_public_path__ + \"static/media/Rain.741ef3be.svg\";","module.exports = __webpack_public_path__ + \"static/media/Snow.6c248142.svg\";","module.exports = __webpack_public_path__ + \"static/media/ThunderStorm.6ca4d282.svg\";","module.exports = __webpack_public_path__ + \"static/media/Tornado.abd95cbf.svg\";","import Clear from '../assests/Clear.svg'\nimport Clouds from '../assests/Clouds.svg'\nimport Drizzle from '../assests/Drizzle.svg'\nimport Other from '../assests/Other.svg'\nimport Rain from '../assests/Rain.svg'\nimport Snow from '../assests/Snow.svg'\nimport ThunderStorm from '../assests/ThunderStorm.svg'\nimport Tornado from '../assests/Tornado.svg'\n\n\nconst getIcon = (iconName) => {\n    const allIcons = {\n        Clear: Clear,\n        Clouds: Clouds,\n        Drizzle: Drizzle,\n        Other: Other,\n        Rain: Rain,\n        Snow: Snow,\n        ThunderStorm: ThunderStorm,\n        Tornado: Tornado\n    }\n\n    return allIcons[iconName] ? allIcons[iconName] : allIcons.Other\n}\n\n\nexport default getIcon","import React from 'react'\n\nconst appContext = React.createContext({})\n\nexport default appContext","import React, { useContext } from 'react'\nimport './CityOption.scss'\nimport getIcon from '../../../helpers/weatherIcons'\nimport AppContext from './../../../context/app-context'\n\n\n\n\nconst CityOption = ({ data, chosenModifierClass, click, isClicked }) => {\n    console.log(getIcon(data.weather))\n    const appContext = useContext(AppContext)\n    const isToggledToFahrenheit = appContext.isToggledToFahrenheit\n    const temp = isToggledToFahrenheit ? Math.round((data.temp * 9 / 5)) + 32 : data.temp\n\n\n    return (\n        <div className={`CityOption  ${chosenModifierClass}`} onClick={click}>\n            <p className=\"CityOption__city\">{data.name}</p>\n            <div className=\"CityOption__weather-container\">{isClicked ? <img className=\"CityOption__weather\" src={getIcon(data.weather)} alt='weather condition' /> : null}</div>\n            <span className='CityOption__temp'>{isClicked ? temp : null} </span>\n        </div >\n    )\n}\n\nexport default CityOption","import React, { useState } from 'react'\nimport CityOption from './CityOption/CityOption'\nimport './CitiesOptions.scss'\n\n\nconst CityOptions = ({ cities, selectAnswerHandler, selectedAnswerId, maxScore, curScore }) => {\n\n    const correctId = cities[0].temp > cities[1].temp ? cities[0].id : cities[1].id\n\n\n    let additionalClass = ''\n    const citiesToDisplay = cities.map(cur => {\n        const onClickHandler = () => {\n            if (!selectedAnswerId) {\n                selectAnswerHandler(cur.id, correctId)\n            }\n\n        }\n\n        additionalClass = cur.id === correctId ? 'CityOption__Correct' : 'CityOption__False'\n        additionalClass = selectedAnswerId === cur.id ? additionalClass : ''\n        return < CityOption\n            key={cur.id}\n            data={cur} h\n            chosenModifierClass={additionalClass}\n            click={onClickHandler}\n            isClicked={selectedAnswerId} />\n    })\n\n\n    return (\n        <>\n\n            <div className=\"CityOptions\">\n                <h1 className='CityOptions__question'>Which is warmer?</h1>\n                <p className='CityOptions__score'>Your score is: {curScore}/{maxScore}</p>\n                <div className='CityOptions__all-cities'>\n                    {citiesToDisplay}\n                </div>\n            </div>\n        </>\n\n\n\n    )\n\n}\n\nexport default CityOptions","import React from 'react'\nimport './Loader.css'\n\n\nconst loader = () => (\n    <div className=\"Loader-container\">\n        <div id=\"frame_circle\">\n            <div className=\"circle\"></div>\n        </div>\n        <div id=\"frame\">\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n        </div>\n    </div>\n)\n\nexport default loader ","export default [\n    { name: 'Tbilisi', id: 611717 },\n    { name: 'Kiev', id: 703448 },\n    { name: 'London', id: 2643743 },\n    { name: 'Sydney', id: 2147714 },\n    { name: 'Rome', id: 3169070 },\n    { name: 'Prague', id: 3067696 },\n    { name: 'Los Angeles', id: 5368361 },\n    { name: 'Toronto', id: 6167865 },\n    { name: 'Tokyo', id: 1850147 },\n    { name: 'Paris', id: 2988507 },\n    { name: 'New York', id: 5128581 },\n    { name: 'Vienna', id: 2761369 },\n    { name: 'Barcelona', id: 3128760 },\n    { name: 'Amsterdam', id: 2759794 },\n    { name: 'Berlin', id: 2950159 },\n    { name: 'Florence', id: 3176959 },\n    { name: 'Dubai', id: 292223 },\n    { name: 'Madris', id: 3117735 },\n    { name: 'Hong Kong', id: 1819729 },\n    { name: 'Las Vegas', id: 5506956 }\n\n\n\n\n]","import React from 'react'\nimport './Button.scss'\n\nconst button = ({ click, disabled, children, type }) => {\n    const btnClass = type === 'nextBtn' ? \"Button__next\" : \"Button__restart\"\n    console.log(type)\n    return (\n        <button className={btnClass} onClick={click} disabled={disabled} >{children}</button>\n    )\n\n}\n\nexport default button","import React from 'react'\nimport './ToggleSwitcher.scss'\n\nconst switcher = ({ click }) => (\n    <div className='ToggleSwitcher' onChange={click}>\n        <span className='ToggleSwitcher__fahrenheit'>°F</span>\n        <input type=\"checkbox\" id=\"switch\" />\n        <label htmlFor=\"switch\">Toggle</label>\n    </div>\n)\n\nexport default switcher","import React, { Component } from 'react';\nimport './App.css';\nimport CitiesOptions from './components/CityOptions/CitiesOptions'\nimport Loader from './components/Loader/Loader'\nimport mockData from './mockData'\nimport Button from './components/Button/Button'\nimport ToggleSwitcher from './components/ToggleSwitcher/ToggleSwitcher'\nimport AppContext from './context/app-context'\n\n\n\nconst myAppId = 'appid=8b1d635ad8d19cf658437581aeb08e79'\nclass App extends Component {\n  state = {\n    data: null,\n    currOptionsIndex: 0,\n    selectedAnswerId: null,\n    curScore: 0,\n    isToggledToFahrenheit: false\n  }\n\n  componentDidMount() {\n    this.getWeatherData()\n  }\n\n  async getWeatherData() {\n    const allCityIds = mockData.map(cur => cur.id).join(',')\n    try {\n      const result = await fetch(`https://api.openweathermap.org/data/2.5/group?id=${allCityIds}&units=metric&${myAppId}`)\n      const allData = await result.json()\n      const neededData = allData.list.map(cur => {\n        return {\n          temp: parseInt(cur.main.temp),\n          weather: cur.weather[0].main,\n          name: cur.name,\n          id: cur.id\n        }\n      })\n\n      const chunkedData = Array.from({ length: Math.ceil(neededData.length / 2) }, (v, i) => neededData.slice(i * 2, i * 2 + 2))\n      this.setState({ data: chunkedData })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n\n  nextBtnClickHandler = () => {\n    const newIndex = this.state.currOptionsIndex + 1\n\n    if (newIndex <= this.state.data.length - 1) {\n      this.setState({ currOptionsIndex: newIndex })\n    }\n\n    this.setState({ selectedAnswerId: null })\n\n  }\n\n  selectedAnswerHandler = (id, correctId) => {\n    if (id === correctId) {\n      this.setState({ curScore: this.state.curScore + 1 })\n    }\n    this.setState({ selectedAnswerId: id })\n\n  }\n\n  restartGameHandler = () => {\n    this.setState({\n      currOptionsIndex: 0,\n      selectedAnswerId: null,\n      curScore: 0\n    })\n  }\n\n  onToggleHandler = () => {\n    this.setState({ isToggledToFahrenheit: !this.state.isToggledToFahrenheit })\n  }\n\n\n  render() {\n    let content = <Loader />\n\n    if (this.state.data) {\n      content = <>\n        <ToggleSwitcher click={this.onToggleHandler} />\n        <AppContext.Provider value={{\n          isToggledToFahrenheit: this.state.isToggledToFahrenheit\n        }\n        }\n        >\n          <CitiesOptions\n            curScore={this.state.curScore}\n            cities={this.state.data[this.state.currOptionsIndex]}\n            selectAnswerHandler={this.selectedAnswerHandler}\n            selectedAnswerId={this.state.selectedAnswerId}\n            maxScore={this.state.data.length}\n          />\n        </AppContext.Provider>\n        {\n          this.state.currOptionsIndex !== this.state.data.length - 1 ? (<div className='Buttons'>\n            <Button\n              click={this.nextBtnClickHandler}\n              disabled={!this.state.selectedAnswerId}\n              type='nextBtn'>\n              Next\n        </Button>\n            <Button type='restartBtn' click={this.restartGameHandler} disabled={this.state.currOptionsIndex === 0}>Restart</Button>\n\n          </div>) : <div className='Buttons'><Button type='restartBtn' click={this.restartGameHandler} disabled={this.state.currOptionsIndex === 0}>Restart</Button></div>\n        }\n\n      </>\n    }\n\n    return (\n      <div className=\"App\" >\n        {content}\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}