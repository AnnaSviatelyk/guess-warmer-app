{"version":3,"sources":["assests/Clear.svg","assests/Clouds.svg","assests/Drizzle.svg","assests/Other.svg","assests/Rain.svg","assests/Snow.svg","assests/ThunderStorm.svg","assests/Tornado.svg","mockData.js","components/Loader/Loader.js","components/Buttons/Button/Button.js","context/app-context.js","components/Buttons/Buttons.js","components/ToolBar/Navigation/Navigation.js","components/ToolBar/ToggleSwitcher/ToggleSwitcher.js","components/ToolBar/ToolBar.js","helpers/weatherIcons.js","components/CitiesOptions/CityOption/CityOption.js","components/CitiesOptions/CitiesOptions.js","components/HistoryPage/HistoryPage.js","components/MainPage/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","name","id","loader","className","button","click","disabled","children","btnClass","type","onClick","appContext","React","createContext","Buttons","useContext","AppContext","nextBtnClick","disabledNext","restartBtnClick","curIndex","dataLength","buttons","navigationItems","switcher","onChange","htmlFor","ToolBar","toggleClick","navClick","getIcon","iconName","allIcons","Clear","Clouds","Drizzle","Other","Rain","Snow","ThunderStorm","Tornado","CityOption","data","chosenModifierClass","isClicked","temp","isToggledToFahrenheit","Math","round","src","weather","alt","CityOptions","cities","selectAnswerHandler","selectedAnswerId","correctId","additionalClass","citiesToDisplay","map","cur","key","HistoryPage","allAnswers","results","MainPage","curScore","maxScore","App","state","currOptionsIndex","history","isHistory","nextBtnClickHandler","newIndex","length","setState","selectedAnswerHandler","addClass","newHistoryArr","push","restartGameHandler","onToggleHandler","navClickHander","navItem","this","getWeatherData","allCityIds","mockData","join","fetch","result","json","allData","neededData","list","parseInt","main","chunkedData","Array","from","ceil","v","i","slice","console","error","content","context","Provider","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a6199870.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Clear.ff816a6b.svg\";","module.exports = __webpack_public_path__ + \"static/media/Clouds.bfd87d49.svg\";","module.exports = __webpack_public_path__ + \"static/media/Drizzle.741ef3be.svg\";","module.exports = __webpack_public_path__ + \"static/media/Other.7085c567.svg\";","module.exports = __webpack_public_path__ + \"static/media/Rain.741ef3be.svg\";","module.exports = __webpack_public_path__ + \"static/media/Snow.6c248142.svg\";","module.exports = __webpack_public_path__ + \"static/media/ThunderStorm.6ca4d282.svg\";","module.exports = __webpack_public_path__ + \"static/media/Tornado.abd95cbf.svg\";","export default [\n    { name: 'Tbilisi', id: 611717 },\n    { name: 'Kiev', id: 703448 },\n    { name: 'London', id: 2643743 },\n    { name: 'Sydney', id: 2147714 },\n    { name: 'Rome', id: 3169070 },\n    { name: 'Prague', id: 3067696 },\n    { name: 'Los Angeles', id: 5368361 },\n    { name: 'Toronto', id: 6167865 },\n    { name: 'Tokyo', id: 1850147 },\n    { name: 'Paris', id: 2988507 },\n    { name: 'New York', id: 5128581 },\n    { name: 'Vienna', id: 2761369 },\n    { name: 'Barcelona', id: 3128760 },\n    { name: 'Amsterdam', id: 2759794 },\n    { name: 'Berlin', id: 2950159 },\n    { name: 'Florence', id: 3176959 },\n    { name: 'Dubai', id: 292223 },\n    { name: 'Madris', id: 3117735 },\n    { name: 'Hong Kong', id: 1819729 },\n    { name: 'Las Vegas', id: 5506956 }\n]","import React from 'react'\nimport './Loader.css'\n\n\nconst loader = () => (\n    <div className=\"Loader-container\">\n        <div id=\"frame_circle\">\n            <div className=\"circle\"></div>\n        </div>\n        <div id=\"frame\">\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n            <div className=\"bar\"></div>\n        </div>\n    </div>\n)\n\nexport default loader ","import React from 'react'\nimport './Button.scss'\n\nconst button = ({ click, disabled, children, type }) => {\n    const btnClass = type === 'nextBtn' ? \"Button__next\" : \"Button__restart\"\n    return (\n        <button className={btnClass} onClick={click} disabled={disabled} >{children}</button>\n    )\n\n}\n\nexport default button","import React from 'react'\n\nconst appContext = React.createContext({})\n\nexport default appContext","import React, { useContext } from 'react'\nimport Button from './Button/Button'\nimport './Buttons.css'\nimport AppContext from '../../context/app-context'\n\n\n\nconst Buttons = () => {\n\n    const { nextBtnClick, disabledNext, restartBtnClick, curIndex, dataLength } = useContext(AppContext)\n    let buttons = (\n        <div className='Buttons'>\n            <Button\n                click={nextBtnClick}\n                disabled={disabledNext}\n                type='nextBtn'>\n                Next</Button>\n            <Button type='restartBtn' click={restartBtnClick} disabled={curIndex === 0}>Restart</Button>\n        </div>\n    )\n\n    if (curIndex === dataLength - 1) {\n        buttons = (\n            <div className='Buttons'>\n                <Button type='restartBtn' click={restartBtnClick} disabled={curIndex === 0}>Restart</Button>\n            </div>)\n    }\n\n\n    return (buttons)\n}\n\nexport default Buttons","import React from 'react'\nimport './Navigation.scss'\n\nconst navigationItems = ({ click }) => (\n    <ul className='Navigation'>\n        <li className='Navigation__item' onClick={() => click('main')}>Main</li>\n        <li className='Navigation__item' onClick={() => click('history')}>History</li>\n    </ul>\n)\nexport default navigationItems","import React from 'react'\nimport './ToggleSwitcher.scss'\n\nconst switcher = ({ click }) => (\n    <div className='ToggleSwitcher' onChange={click}>\n        <span className='ToggleSwitcher__fahrenheit'>°F</span>\n        <input className='ToggleSwitcher__input' type=\"checkbox\" id=\"switch\" />\n        <label className='ToggleSwitcher__label' htmlFor=\"switch\">Toggle</label>\n    </div>\n)\n\nexport default switcher","import React from 'react'\nimport './ToolBar.css'\nimport Navigation from './Navigation/Navigation'\nimport ToggleSwitcher from './ToggleSwitcher/ToggleSwitcher'\nimport { useContext } from 'react'\nimport AppContext from '../../context/app-context'\n\nconst ToolBar = () => {\n    const { toggleClick, navClick } = useContext(AppContext)\n\n    return (\n        <div className='Toolbar'>\n            <ToggleSwitcher click={toggleClick} />\n            <Navigation click={navClick} />\n        </div>\n    )\n\n}\n\nexport default ToolBar","import Clear from '../assests/Clear.svg'\nimport Clouds from '../assests/Clouds.svg'\nimport Drizzle from '../assests/Drizzle.svg'\nimport Other from '../assests/Other.svg'\nimport Rain from '../assests/Rain.svg'\nimport Snow from '../assests/Snow.svg'\nimport ThunderStorm from '../assests/ThunderStorm.svg'\nimport Tornado from '../assests/Tornado.svg'\n\n\nconst getIcon = (iconName) => {\n    const allIcons = {\n        Clear: Clear,\n        Clouds: Clouds,\n        Drizzle: Drizzle,\n        Other: Other,\n        Rain: Rain,\n        Snow: Snow,\n        ThunderStorm: ThunderStorm,\n        Tornado: Tornado\n    }\n\n    return allIcons[iconName] ? allIcons[iconName] : allIcons.Other\n}\n\n\nexport default getIcon","import React, { useContext } from 'react'\nimport './CityOption.scss'\nimport getIcon from '../../../helpers/weatherIcons'\nimport AppContext from '../../../context/app-context'\n\n\nconst CityOption = ({ data, chosenModifierClass, click, isClicked }) => {\n    const appContext = useContext(AppContext)\n    const isToggledToFahrenheit = appContext.isToggledToFahrenheit\n    const temp = isToggledToFahrenheit ? Math.round((data.temp * 9 / 5)) + 32 : data.temp\n\n    return (\n        <div className={`CityOption  ${chosenModifierClass}`} onClick={click}>\n            <p className=\"CityOption__city\">{data.name}</p>\n            <div className=\"CityOption__weather-container\">{isClicked ? <img className=\"CityOption__weather\" src={getIcon(data.weather)} alt='weather condition' /> : null}</div>\n            <span className='CityOption__temp'>{isClicked ? temp : null} </span>\n        </div >\n    )\n}\n\nexport default CityOption","import React from 'react'\nimport CityOption from './CityOption/CityOption'\nimport './CitiesOptions.css'\n\n\nconst CityOptions = ({ cities, selectAnswerHandler, selectedAnswerId }) => {\n\n    const correctId = cities[0].temp > cities[1].temp ? cities[0].id : cities[1].id\n\n    let additionalClass = ''\n\n    const citiesToDisplay = cities.map(cur => {\n        additionalClass = cur.id === correctId ? 'CityOption__Correct' : 'CityOption__False'\n        additionalClass = selectedAnswerId === cur.id ? additionalClass : ''\n        const onClickHandler = () => {\n            if (!selectedAnswerId) {\n                selectAnswerHandler(cur.id, correctId, additionalClass)\n            }\n        }\n\n        return < CityOption\n            key={cur.id}\n            data={cur}\n            chosenModifierClass={additionalClass}\n            click={onClickHandler}\n            isClicked={selectedAnswerId} />\n    })\n\n\n    return (\n        <div className='CitiesOptions__all-cities'>\n            {citiesToDisplay}\n        </div>\n    )\n\n}\n\nexport default CityOptions","import React from 'react'\nimport './HistoryPage.scss'\nimport CitiesOptions from '../CitiesOptions/CitiesOptions'\n\nconst HistoryPage = ({ results }) => {\n    const allAnswers = results.map(cur => {\n\n        return <CitiesOptions cities={cur.cities} selectedAnswerId={cur.selectedAnswerId} key={cur.cities[0].id} />\n    })\n\n    return (\n        <div className='HistoryPage'>\n            <h2 className=\"HistoryPage__heading\">Here are your answers</h2>\n            {allAnswers}\n        </div>\n\n    )\n\n}\n\n\nexport default HistoryPage","import React, { useContext } from 'react';\nimport './MainPage.scss';\nimport CitiesOptions from '../CitiesOptions/CitiesOptions'\nimport AppContext from '../../context/app-context'\n\n\nconst MainPage = ({ curScore, maxScore }) => {\n    const { cities, selectAnswerHandler, selectedAnswerId } = useContext(AppContext)\n\n    return (\n        <div className=\"Cities-container\">\n            <h1 className='Cities-container__question'>Which is warmer?</h1>\n            <p className='Cities-container__score'>Your score is: {curScore}/{maxScore}</p>\n            <CitiesOptions cities={cities} selectAnswerHandler={selectAnswerHandler} selectedAnswerId={selectedAnswerId} />\n        </div>\n    )\n}\n\nexport default MainPage","import React, { Component } from 'react';\nimport './App.css';\nimport mockData from './mockData'\nimport Loader from './components/Loader/Loader'\nimport Buttons from './components/Buttons/Buttons'\nimport AppContext from './context/app-context'\nimport ToolBar from './components/ToolBar/ToolBar'\nimport HistoryPage from './components/HistoryPage/HistoryPage';\nimport MainPage from './components/MainPage/MainPage'\n\nconst myAppId = 'appid=8b1d635ad8d19cf658437581aeb08e79'\nclass App extends Component {\n  state = {\n    data: null,\n    currOptionsIndex: 0,\n    selectedAnswerId: null,\n    curScore: 0,\n    isToggledToFahrenheit: false,\n    history: [],\n    isHistory: false\n  }\n\n  componentDidMount() {\n    this.getWeatherData()\n  }\n\n  async getWeatherData() {\n    const allCityIds = mockData.map(cur => cur.id).join(',')\n    try {\n      const result = await fetch(`https://api.openweathermap.org/data/2.5/group?id=${allCityIds}&units=metric&${myAppId}`)\n      const allData = await result.json()\n      const neededData = allData.list.map(cur => {\n        return {\n          temp: parseInt(cur.main.temp),\n          weather: cur.weather[0].main,\n          name: cur.name,\n          id: cur.id\n        }\n      })\n\n      const chunkedData = Array.from({ length: Math.ceil(neededData.length / 2) }, (v, i) => neededData.slice(i * 2, i * 2 + 2))\n      this.setState({ data: chunkedData })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n\n  nextBtnClickHandler = () => {\n    const newIndex = this.state.currOptionsIndex + 1\n\n    if (newIndex <= this.state.data.length - 1) {\n      this.setState({ currOptionsIndex: newIndex })\n    }\n\n    this.setState({\n      selectedAnswerId: null\n    })\n\n  }\n\n  selectedAnswerHandler = (id, correctId, addClass) => {\n    if (id === correctId) {\n      this.setState({ curScore: this.state.curScore + 1 })\n    }\n    const newHistoryArr = [...this.state.history]\n    newHistoryArr.push({\n      cities: this.state.data[this.state.currOptionsIndex],\n      selectedAnswerId: id\n    })\n\n    this.setState({\n      selectedAnswerId: id,\n      history: newHistoryArr\n    })\n  }\n\n  restartGameHandler = () => {\n    this.setState({\n      history: [],\n      currOptionsIndex: 0,\n      selectedAnswerId: null,\n      curScore: 0\n    })\n  }\n\n  onToggleHandler = () => {\n    this.setState({ isToggledToFahrenheit: !this.state.isToggledToFahrenheit })\n  }\n\n  navClickHander = (navItem) => {\n    if (navItem === 'main') {\n      this.setState({ isHistory: false })\n    } else {\n      this.setState({ isHistory: true })\n    }\n  }\n\n  render() {\n    let content = <Loader />\n\n    if (this.state.data) {\n      const context = {\n        isToggledToFahrenheit: this.state.isToggledToFahrenheit,\n        cities: this.state.data[this.state.currOptionsIndex],\n        selectAnswerHandler: this.selectedAnswerHandler,\n        selectedAnswerId: this.state.selectedAnswerId,\n        nextBtnClick: this.nextBtnClickHandler,\n        disabledNext: !this.state.selectedAnswerId,\n        restartBtnClick: this.restartGameHandler,\n        curIndex: this.state.currOptionsIndex,\n        dataLength: this.state.data.length,\n        toggleClick: this.onToggleHandler,\n        navClick: this.navClickHander\n      }\n\n      content =\n        <>\n          <AppContext.Provider value={{ ...context }}>\n            <ToolBar />\n            {this.state.isHistory ? <HistoryPage results={this.state.history} /> :\n              <>\n                <MainPage curScore={this.state.curScore} maxScore={this.state.data.length} />\n                <Buttons />\n              </>\n            }\n          </AppContext.Provider>\n        </>\n    }\n\n    return (\n      <div className=\"App\" >\n        {content}\n      </div>\n    )\n  }\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}